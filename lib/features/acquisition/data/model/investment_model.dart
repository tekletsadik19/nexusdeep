import 'package:nexusdeep/core/utils/typedef.dart';
import 'package:nexusdeep/features/acquisition/domain/entity/investment.dart';

class InvestmentModel extends Investment {
  const InvestmentModel({
    required super.id,
    required super.institutionId,
    required super.institutionName,
    super.institutionLogo,
    required super.title,
    super.contactInfo,
    required super.businessIndustry,
    required super.description,
    required super.returnCurrency,
    required super.investmentAmount,
    required super.initialInvestment,
    super.monthlyPayment,
    super.loanTerm,
    required super.returnTime,
    required super.expireDate,
    required super.collateralRequired,
    required super.interestRate,
    required super.riskLevel,
    required super.sector,
    required super.userId,
    super.supportingDocuments,
    super.businessAssets,
    super.existingDebts,
    super.createdAt,
    super.updatedAt,
  });

  InvestmentModel.fromMap(DataMap map)
      : super(
    id: map['_id'] as String,
    institutionId: map['institutionId'] as String,
    institutionName: map['institutionName'] as String,
    institutionLogo: map['institutionLogo'] as String?,
    title: map['title'] as String,
    contactInfo: map['contactInfo'] as String?,
    businessIndustry: map['businessIndustry'] as String,
    description: map['description'] as String,
    returnCurrency: map['returnCurrency'] as String,
    investmentAmount: map['investmentAmount'] as double,
    initialInvestment: map['initialInvestment'] as double,
    monthlyPayment: map['monthlyPayment'] as double?,
    loanTerm: map['loanTerm'] as int?,
    returnTime: DateTime.parse(map['returnTime'] as String),
    expireDate: DateTime.parse(map['expireDate'] as String),
    collateralRequired: map['collateralRequired'] as bool,
    interestRate: map['interestRate'] as double,
    riskLevel: map['riskLevel'] as String,
    sector: map['sector'] as String,
    userId: map['userId'] as String,
    supportingDocuments: List<String>.from(map['supportingDocuments'] as List<dynamic>? ?? []),
    businessAssets: List<String>.from(map['businessAssets'] as List<dynamic>? ?? []),
    existingDebts: List<String>.from(map['existingDebts'] as List<dynamic>? ?? []),
    createdAt: map['createdAt'] != null ? DateTime.parse(map['createdAt'] as String) : null,
    updatedAt: map['updatedAt'] != null ? DateTime.parse(map['updatedAt'] as String) : null,
  );

  DataMap toMap() {
    return {
      '_id': id,
      'institutionId': institutionId,
      'institutionName': institutionName,
      'institutionLogo': institutionLogo,
      'title': title,
      'contactInfo': contactInfo,
      'businessIndustry': businessIndustry,
      'description': description,
      'returnCurrency': returnCurrency,
      'investmentAmount': investmentAmount,
      'initialInvestment': initialInvestment,
      'monthlyPayment': monthlyPayment,
      'loanTerm': loanTerm,
      'returnTime': returnTime.toIso8601String(),
      'expireDate': expireDate.toIso8601String(),
      'collateralRequired': collateralRequired,
      'interestRate': interestRate,
      'riskLevel': riskLevel,
      'sector': sector,
      'userId': userId,
      'supportingDocuments': supportingDocuments,
      'businessAssets': businessAssets,
      'existingDebts': existingDebts,
      'createdAt': createdAt?.toIso8601String(),
      'updatedAt': updatedAt?.toIso8601String(),
    };
  }
}